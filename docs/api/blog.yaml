openapi: 3.1.0
info:
  title: blog
  version: '1.0'
  contact:
    url: 'https://github.com/masatoi/blog'
    email: satoshi.imai@gmail.com
  description: Simple blog API
servers:
  - url: 'http://localhost:5000'
paths:
  /users:
    parameters: []
    get:
      summary: Get User List
      tags:
        - User
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    rows:
                      - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                        name: string
                        created_at: '2019-08-24T14:15:22Z'
                        updated_at: '2019-08-24T14:15:22Z'
        '404':
          description: User Not Found
      operationId: get-users
      description: Get user list
      x-internal: false
      parameters:
        - schema:
            type: integer
            minimum: 1
            maximum: 1000
          in: query
          name: per_page
          description: Number of items per page
    post:
      summary: Create User
      tags:
        - User
      operationId: create-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
      description: Create new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 0
                  maxLength: 256
  '/users/{user_id}':
    parameters:
      - schema:
          type: string
          format: uuid
          example: 09e4c9fd-33da-4e0e-a224-347040ee11f4
        name: user_id
        in: path
        description: Id of an existing user.
        required: true
    get:
      summary: Get User Info by User ID
      tags:
        - User
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    name: string
                    created_at: '2019-08-24T14:15:22Z'
                    updated_at: '2019-08-24T14:15:22Z'
                example-2:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    name: string
                    created_at: '2019-08-24T14:15:22Z'
                    updated_at: '2019-08-24T14:15:22Z'
        '404':
          description: User Not Found
      operationId: get-user
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update User Info by User ID
      tags:
        - User
      operationId: update-user-info
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    name: string
                    created_at: '2019-08-24T14:15:22Z'
                    updated_at: '2019-08-24T14:15:22Z'
      description: Update user info
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 0
                  maxLength: 256
            examples:
              example-1:
                value:
                  name: string
components:
  schemas:
    User:
      title: User
      type: object
      description: blog user schema
      properties:
        id:
          type: string
          description: Unique identifier for the given user.
          format: uuid
          minLength: 36
          maxLength: 36
        name:
          type: string
          minLength: 0
          maxLength: 256
        created_at:
          type: string
          description: Set to true if the user's email has been verified.
          format: date-time
        updated_at:
          type: string
          format: date-time
          description: The date that the user was created.
      required:
        - id
        - name
        - created_at
tags:
  - name: User
